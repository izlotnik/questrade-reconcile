<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="QuestradeDashboard" script:language="StarBasic" script:moduleType="normal">REM *****************************************************************************

Function RATEFROM( sSheet As String, sCAD As String, sUSD As String ) As Double
	oSheet = ThisComponent.Sheets.getByName( sSheet )
	dCAD = oSheet.getCellRangeByName( sCAD ).getValue( )
	dUSD = oSheet.getCellRangeByName( sUSD ).getValue( )
	RATEFROM = dCAD / dUSD
End Function

REM *****************************************************************************

Function EXCHANGERATE( ) As Double
	oNamedRange = ThisComponent.NamedRanges.getByName( &quot;Exchange_Rate&quot; )
	oCell = oNamedRange.getReferredCells( )
	EXCHANGERATE = oCell.getValue( )
End Function

REM *****************************************************************************

Function SEARCHDESCRIPTOR( oRange As Object, sTarget As String ) As Object
	oDescriptor = oRange.createSearchDescriptor( )
	oDescriptor.setSearchString( sTarget )
	oDescriptor.SearchCaseSensitive = true
	oDescriptor.SearchWords = true
	SEARCHDESCRIPTOR = oDescriptor
End Function

REM *****************************************************************************

Function FINDCELL( oSheet As Object, sRange As String, sTarget As String ) As Object
	Dim oRange, oDescriptor As Object
	oRange = oSheet.getCellRangeByName( sRange )
	oDescriptor = SEARCHDESCRIPTOR( oRange, sTarget )
	FINDCELL = oRange.findFirst( oDescriptor )
End Function

REM *****************************************************************************

Function COLUMNFROM( oCell As Object ) As Long
	COLUMNFROM = oCell.getCellAddress( ).Column
End Function

REM *****************************************************************************

Function ROWFROM( oCell As Object ) As Long
	ROWFROM = oCell.getCellAddress( ).Row
End Function

REM *****************************************************************************

Function COLUMN( oSheet As Object, sRange As String, sTarget As String ) As Long
	COLUMN = COLUMNFROM( FINDCELL( oSheet, sRange, sTarget ) )
End Function

REM *****************************************************************************

Function ROW( oSheet As Object, sRange As String, sTarget As String ) As Long
	ROW = ROWFROM( FINDCELL( oSheet, sRange, sTarget ) )
End Function

REM *****************************************************************************

Function MAPVALUE( sAccount As Variant, sSymbol As String, sSheet As String, sRange As String, sColumn As String, bCurrency As Boolean, bTotal As Boolean ) As Double
	Dim dValue, dTotal As Double
	Dim lAccount, lColumn, lSymbol, lCurrency As Long
	Dim oSymbol As Variant
	Dim oSheet, oRange, oDescriptor, oAccount, oValue As Object
	dValue = 0.0
	dTotal = 0.0
	On Local Error GoTo Finalize
	oSheet = ThisComponent.Sheets.getByName( sSheet )
	oRange = oSheet.getCellRangeByName( sRange )
	lAccount = COLUMN( oSheet, &quot;A1:AMJ1&quot;, &quot;account&quot; )
	lColumn = COLUMN( oSheet, &quot;A1:AMJ1&quot;, sColumn )
	lCurrency = COLUMN( oSheet, &quot;A1:AMJ1&quot;, &quot;currency&quot; )
	oDescriptor = SEARCHDESCRIPTOR( oRange, sSymbol )
	oSymbol = oRange.findFirst( oDescriptor )
	While IsNull( oSymbol ) = False
		lSymbol = ROWFROM( oSymbol )
		oAccount = oSheet.getCellByPosition( lAccount, lSymbol )
		If IsNull( sAccount ) or oAccount.getString( ) = sAccount Then
			oValue = oSheet.getCellByPosition( lColumn, lSymbol )
			oCurrency = oSheet.getCellByPosition( lCurrency, ROWFROM( oValue ) )
			dValue = IIF( bCurrency And oCurrency.getString( ) = &quot;USD&quot;, oValue.getValue( ) * EXCHANGERATE( ), oValue.getValue( ) )
			dTotal = dTotal + dValue
		End If
		oSymbol = oRange.findNext( oSymbol, oDescriptor )
	Wend
Finalize:
	MAPVALUE = IIF( bTotal, dTotal, dValue )
End Function

REM *****************************************************************************

Function DIVIDENDS( sSymbol As String ) As Double
	Dim dValue, dTotal As Double
	Dim lType, lAmount, lSymbol, lCurrency As Long
	Dim oSymbol As Variant
	Dim oSheet, oRange, oDescriptor, oType, oAmount As Object
	dValue = 0.0
	dTotal = 0.0
	On Local Error GoTo Finalize
	oSheet = ThisComponent.Sheets.getByName( &quot;Activities&quot; )
	oRange = oSheet.getCellRangeByName( &quot;E1:E1048576&quot; )
	lType = COLUMN( oSheet, &quot;A1:AMJ1&quot;, &quot;type&quot; )
	lAmount = COLUMN( oSheet, &quot;A1:AMJ1&quot;, &quot;netAmount&quot; )
	lCurrency = COLUMN( oSheet, &quot;A1:AMJ1&quot;, &quot;currency&quot; )
	oDescriptor = SEARCHDESCRIPTOR( oRange, sSymbol )
	oSymbol = oRange.findFirst( oDescriptor )
	While IsNull( oSymbol ) = False
		lSymbol = ROWFROM( oSymbol )
		oType = oSheet.getCellByPosition( lType, lSymbol )
		If oType.getString( ) = &quot;Dividends&quot; Then
			oAmount = oSheet.getCellByPosition( lAmount, lSymbol )
			oCurrency = oSheet.getCellByPosition( lCurrency, ROWFROM( oAmount ) )
			dValue = IIF( oCurrency.getString( ) = &quot;USD&quot;, oAmount.getValue( ) * EXCHANGERATE( ), oAmount.getValue( ) )
			dTotal = dTotal + dValue
		End If
		oSymbol = oRange.findNext( oSymbol, oDescriptor )
	Wend
Finalize:
	DIVIDENDS = dTotal
End Function

REM *****************************************************************************

Function ACCOUNT( sType As String ) As String
	Dim lAccount, lColumn, lRow As Long
	Dim oSheet, oCell As Object
	lAccount = 0.0
	On Local Error GoTo Finalize
	oSheet = ThisComponent.Sheets.getByName( &quot;Accounts&quot; )
	lColumn =  COLUMNFROM( FINDCELL( oSheet, &quot;A1:AMJ1&quot;, &quot;number&quot; ) )
	lRow = ROWFROM( FINDCELL( oSheet, &quot;B1:B1048576&quot;, sType ) )
	oCell = oSheet.getCellByPosition( lColumn, lRow )
	lAccount = oCell.getString( )
Finalize: 
	ACCOUNT = lAccount
End Function

REM *****************************************************************************

Function CURRENCYOF( sSymbol As String ) As Variant
	Dim sCurrency As Variant
	sCurrency = Null
	On Local Error GoTo Finalize
	oSheet = ThisComponent.Sheets.getByName( &quot;Equities&quot; )
	lColumn =  COLUMNFROM( FINDCELL( oSheet, &quot;A1:AMJ1&quot;, &quot;currency&quot; ) )
	lRow = ROWFROM( FINDCELL( oSheet, &quot;D1:D1048576&quot;, sSymbol ) )
	oCell = oSheet.getCellByPosition( lColumn, lRow )
	sCurrency = oCell.getString( )
Finalize:
	CURRENCYOF = sCurrency
End Function

REM *****************************************************************************

Function UNITVALUE( sSymbol As String ) As Double
	Dim dValue As Double
	dValue = MAPVALUE( Null, sSymbol, &quot;Positions&quot;, &quot;D1:D1048576&quot;, &quot;currentPrice&quot;, true, false )
	UNITVALUE = IIF( dValue = 0.0, MAPVALUE( Null, sSymbol, &quot;Equities&quot;, &quot;D1:D1048576&quot;, &quot;prevDayClosePrice&quot;, true, false ), dValue )
End Function

REM *****************************************************************************

Function UNITQTY( sAccount As String, sSymbol As String ) As Double
	UNITQTY = MAPVALUE( sAccount, sSymbol, &quot;Positions&quot;, &quot;D1:D1048576&quot;, &quot;openQuantity&quot;, false, false )
End Function

REM *****************************************************************************

Function UNITCOST( sAccount As String, sSymbol As String ) As Double
	UNITCOST = MAPVALUE( sAccount, sSymbol, &quot;Positions&quot;, &quot;D1:D1048576&quot;, &quot;averageEntryPrice&quot;, true, false )
End Function

REM *****************************************************************************

Function TOTALCOST( sAccount As String, sSymbol As String ) As Double
	TOTALCOST = MAPVALUE( sAccount, sSymbol, &quot;Positions&quot;, &quot;D1:D1048576&quot;, &quot;totalCost&quot;, true, false )
End Function

REM *****************************************************************************

Function TOTALVALUE( sAccount As String, sSymbol As String ) As Double
	TOTALVALUE = MAPVALUE( sAccount, sSymbol, &quot;Positions&quot;, &quot;D1:D1048576&quot;, &quot;currentMarketValue&quot;, true, false )
End Function

REM *****************************************************************************

Function TOTALYIELD( sSymbol As String ) As Double
	TOTALYIELD = MAPVALUE( Null, sSymbol, &quot;Equities&quot;, &quot;D1:D1048576&quot;, &quot;yield&quot;, false, false ) / 100.0
End Function

REM *****************************************************************************

Function TOTALGAIN( sSymbol As String ) As Double
	TOTALGAIN = MAPVALUE( Null, sSymbol, &quot;Positions&quot;, &quot;D1:D1048576&quot;, &quot;openPnl&quot;, true, true )
End Function

REM *****************************************************************************
</script:module>